rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // ==================== FUNCIONES AUXILIARES ====================
    
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Verificar rol del usuario - compatible con ambas estructuras
    function hasRole(role) {
      return isAuthenticated() && 
             (get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.rol == role ||
              get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.role == role);
    }
    
    function isAdmin() {
      return hasRole('administrador');
    }
    
    function isWorker() {
      return hasRole('trabajador');
    }
    
    function isAuthorizedUser() {
      return isAdmin() || isWorker();
    }
    
    function belongsToUserFinca() {
      return isAuthenticated() && 
             resource.data.fincaId == 'finca_la_herradura';
    }
    
    function hasRequiredFields(fields) {
      return request.resource.data.keys().hasAll(fields);
    }
    
    function protectedFieldsUnchanged(fields) {
      return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fields);
    }
    
    function withinLimits() {
      return request.resource.data.size() < 1000000; // 1MB límite
    }
    
    function validTimestamp(field) {
      return request.resource.data[field] is timestamp &&
             request.resource.data[field] <= request.time;
    }
    
    // Validar coordenadas GPS
    function validGPSCoords() {
      return request.resource.data.location.latitude is number &&
             request.resource.data.location.longitude is number &&
             request.resource.data.location.latitude >= -90 &&
             request.resource.data.location.latitude <= 90 &&
             request.resource.data.location.longitude >= -180 &&
             request.resource.data.location.longitude <= 180;
    }
    
    // ==================== COLECCIÓN USUARIOS ====================
    match /usuarios/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      
      allow create: if isOwner(userId) && 
                   hasRequiredFields(['email', 'fechaCreacion']) &&
                   (request.resource.data.keys().hasAny(['rol', 'role'])) &&
                   (request.resource.data.get('rol', '') in ['administrador', 'trabajador'] ||
                    request.resource.data.get('role', '') in ['administrador', 'trabajador']) &&
                   withinLimits();
      
      allow update: if isOwner(userId) && 
                   protectedFieldsUnchanged(['rol', 'role', 'fincaId', 'email', 'fechaCreacion']) &&
                   withinLimits();
      
      allow delete: if isAdmin();
    }
    
    // ==================== COLECCIÓN ÁRBOLES ====================
    match /arboles/{arbolId} {
      // Lectura: usuarios autorizados
      allow read: if isAuthorizedUser();
      
      // Creación: usuarios autorizados con datos válidos del TreeManager
      allow create: if isAuthorizedUser() && 
                   hasRequiredFields(['variety', 'blockId', 'location', 'active']) &&
                   validGPSCoords() &&
                   request.resource.data.variety is string &&
                   request.resource.data.blockId is string &&
                   request.resource.data.active is bool &&
                   request.resource.data.fincaId == 'finca_la_herradura' &&
                   withinLimits();
      
      // Actualización: admins completa, trabajadores limitada
      allow update: if (isAdmin() && withinLimits()) ||
                   (isWorker() && 
                    request.resource.data.diff(resource.data).affectedKeys().hasOnly([
                      'health', 'notes', 'measurements', 'production', 'updatedAt', 'updatedBy'
                    ]) && 
                    withinLimits());
      
      // Eliminación: solo soft delete (cambiar active a false)
      allow update: if isAdmin() && 
                   request.resource.data.active == false &&
                   hasRequiredFields(['deletedBy', 'deletedAt']) &&
                   withinLimits();
      
      // Eliminar físicamente solo admins
      allow delete: if isAdmin();
    }
    
    // ==================== COLECCIÓN SECTORES ====================
    match /sectores/{sectorId} {
      allow read: if isAuthorizedUser();
      
      allow create: if isAuthorizedUser() && 
                   hasRequiredFields(['name', 'capacity', 'coordinates']) &&
                   request.resource.data.capacity is number &&
                   request.resource.data.capacity > 0 &&
                   withinLimits();
      
      allow update: if isAuthorizedUser() && withinLimits();
      
      allow delete: if isAdmin();
    }
    
    // ==================== COLECCIÓN PRODUCCIÓN ====================
    match /cosechas_diarias/{produccionId} {
      allow read: if isAuthorizedUser();
      
      allow create: if isAuthorizedUser() && 
                   hasRequiredFields(['fecha', 'cantidad', 'responsable']) &&
                   request.resource.data.cantidad >= 0 &&
                   request.resource.data.cantidad is number &&
                   withinLimits();
      
      allow update: if (isAdmin() || 
                       (resource.data.responsable == request.auth.uid)) &&
                   withinLimits();
      
      allow delete: if isAdmin();
    }
    
    // ==================== COLECCIÓN TRATAMIENTOS ====================
    match /tratamientos/{tratamientoId} {
      allow read: if isAuthorizedUser();
      
      allow create: if isAuthorizedUser() && 
                   hasRequiredFields(['fecha', 'arbolId', 'producto']) &&
                   withinLimits();
      
      allow update: if (isAdmin() || 
                       (resource.data.responsable == request.auth.uid)) &&
                   withinLimits();
      
      allow delete: if isAdmin();
    }
    
    // ==================== COLECCIÓN VENTAS ====================
    match /ventas_directas/{ventaId} {
      allow read: if isAuthorizedUser();
      
      allow create: if isAuthorizedUser() && 
                   hasRequiredFields(['fecha', 'cantidad', 'precio']) &&
                   request.resource.data.cantidad > 0 &&
                   request.resource.data.precio > 0 &&
                   withinLimits();
      
      allow update: if (isAdmin() || 
                       (resource.data.responsable == request.auth.uid)) &&
                   withinLimits();
      
      allow delete: if isAdmin();
    }
    
    // ==================== COLECCIÓN GASTOS ====================
    match /gastos/{gastoId} {
      allow read: if isAuthorizedUser();
      
      allow create: if isAuthorizedUser() && 
                   hasRequiredFields(['fecha', 'monto', 'categoria', 'descripcion']) &&
                   request.resource.data.monto > 0 &&
                   withinLimits();
      
      allow update: if (isAdmin() || 
                       (resource.data.creadoPor == request.auth.uid)) &&
                   withinLimits();
      
      allow delete: if isAdmin();
    }
    
    // ==================== COLECCIÓN RECORDATORIOS ====================
    match /recordatorios/{recordatorioId} {
      allow read: if isAuthorizedUser();
      
      allow create: if isAuthorizedUser() && 
                   hasRequiredFields(['titulo', 'fecha', 'responsable']) &&
                   withinLimits();
      
      allow update: if (isAdmin() || 
                       (resource.data.responsable == request.auth.uid) ||
                       (request.resource.data.responsable == request.auth.uid)) &&
                   withinLimits();
      
      allow delete: if (isAdmin() || 
                       (resource.data.responsable == request.auth.uid));
    }
    
    // ==================== COLECCIÓN RIEGOS ====================
    match /riegos/{riegoId} {
      allow read, write: if isAuthorizedUser() && withinLimits();
    }
    
    // ==================== COLECCIÓN PRECIOS ====================
    match /precios/{precioId} {
      allow read: if isAuthorizedUser();
      allow write: if isAdmin() && withinLimits();
    }
    
    // ==================== COLECCIÓN CLIENTES ====================
    match /clientes/{clienteId} {
      allow read: if isAuthorizedUser();
      
      allow create: if isAuthorizedUser() && 
                   hasRequiredFields(['nombre', 'tipo']) &&
                   withinLimits();
      
      allow update: if (isAdmin() || 
                       (resource.data.creadoPor == request.auth.uid)) &&
                   withinLimits();
      
      allow delete: if isAdmin();
    }
    
    // ==================== LOGS Y AUDITORÍA ====================
    match /loginLogs/{logId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated() && withinLimits();
    }
    
    match /errorLogs/{logId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated() && withinLimits();
    }
    
    // ==================== CONFIGURACIÓN Y SISTEMA ====================
    match /configuracion/{configId} {
      allow read: if isAuthorizedUser();
      allow write: if isAdmin() && withinLimits();
    }
    
    match /_system/{docId} {
      // Documentos de sistema para health checks
      allow read, write: if isAuthenticated();
    }
    
    // ==================== NOTIFICACIONES ====================
    match /notificaciones/{notifId} {
      allow read: if isAuthenticated() && 
                 resource.data.destinatario == request.auth.uid;
      
      allow create: if isAdmin() && 
                   hasRequiredFields(['destinatario', 'mensaje', 'fecha']) &&
                   withinLimits();
      
      allow update: if isAuthenticated() && 
                   resource.data.destinatario == request.auth.uid &&
                   request.resource.data.diff(resource.data).affectedKeys().hasOnly(['leida', 'fechaLectura']);
      
      allow delete: if isAdmin() || 
                   (isAuthenticated() && resource.data.destinatario == request.auth.uid);
    }
    
    // ==================== ARCHIVOS Y STORAGE ====================
    match /archivos/{archivoId} {
      allow read: if isAuthorizedUser();
      
      allow create: if isAuthorizedUser() && 
                   hasRequiredFields(['nombre', 'tipo', 'fechaSubida']) &&
                   withinLimits();
      
      allow update: if isAuthorizedUser() && 
                   protectedFieldsUnchanged(['url', 'nombre', 'tipo', 'tamano']) &&
                   withinLimits();
      
      allow delete: if isAdmin() || 
                   (resource.data.subidoPor == request.auth.uid);
    }
    
    // ==================== BACKUP Y SINCRONIZACIÓN ====================
    match /backup/{backupId} {
      allow read, write: if isAdmin() && withinLimits();
    }
    
    match /sync/{syncId} {
      allow read, write: if isAuthenticated() && 
                         resource.data.userId == request.auth.uid &&
                         withinLimits();
    }
    
    // ==================== REGLA POR DEFECTO ====================
    // Denegar acceso a cualquier otra colección
    match /{document=**} {
      allow read, write: if false;
    }
  }
}